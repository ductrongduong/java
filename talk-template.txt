Awesome, let me make sure I understand the question correctly: We are given a (string). We need to find ... (Restate a problem)
For example, if the input is ..., the (longest valid substring) is ... .

Just to confirm - substrings must be continuous, right?
Is the string only lowercase letters, or also got uppercase and other characters?
By the way, how long is the input string usually? Just so I know how much I need to optimise the solution.

Okay, I’ll first try a brute-force solution just to get the idea right.
Then I’ll think about how to improve it. (...).
While doing that, I’ll keep track of the longest valid one I’ve found so far.
So overall time complexity is .
But still, it’s too slow if the input length is 10⁵ — it will time out.

Can I take a minute to think about the approach? (Let’s see... trying to recall if sliding window works here.)

------------------------------------------------------------------------------------------------------------------------------------
 Process to day
 - Explain though process
 - Walk through example
 - Talk while code
------------------------------------------------------------------------------------------------------------------------------------
- 1481. Least Number of Unique Integers after K Removals
 - Explain though process:
I think a good way is to remove the numbers with the lowest frequency first.
So the approach is like this: I use a hashmap to count the frequency of each number.
Then I remove elements starting from the ones with the lowest frequency, until I’ve removed k elements.
Counting the frequency takes O(n) time.
If I want to get the lowest frequency elements, I can either convert the map to a heap or a sorted array — that one takes O(log n) time for each removal.
But actually, I can just convert the map to an array of frequencies and sort it. That way, it's simpler and works faster in practice.
So overall, the time complexity is O(n log n) if we sort, or O(n) if we use counting or bucket sort.
Space complexity is O(n).

 - Walk through example:
Yeah, I think I’ll walk through an example.
Let’s say the input is [4, 3, 1, 1, 3, 3, 2] and k = 3.

First, I build a hashmap to count the frequency. So we get:
{4: 1, 3: 3, 1: 2, 2: 1}
That means we have 4 unique numbers.

Then, I create a frequency array — let’s call it freqs — to store how many numbers have frequency = 1, 2, 3, etc.
Since max frequency in this case is 3, I can create an array of size n+1, where n is the length of input.
So we get: freqs = [0, 2, 1, 1, 0, 0, 0, 0]
That means:
2 numbers appear once
1 number appears twice
1 number appears three times

Then I go through this array from lowest frequency to highest. While k > 0, for each frequency i, I try to remove as many unique numbers as possible.
The number of elements I can remove is:
num = min(k // i, freqs[i])
After removing, I update:
k -= num * i
ans -= num
If num == 0, that means I can’t remove anymore, so I return the answer.

So with this example:
Start: ans = 4, k = 3
At i = 1, remove 2 elements → ans = 2, k = 1
At i = 2, we can’t remove anything more (num = 0), so we return 2.
So final result is 2 unique numbers left.
